//.............Wellcome to Hactober Fest 202...............
//
//         this file conatins simple C++ functions 

  int addFunction(int a, int b)
  {
    return a+b;
  }
  int subtractFunction(int a, int b)
  {
    return a-b;
  }
  int divisionFunction(int a , int b)
  {
    return a/b;
  }
  int multiplyFunction(int a , int b)
  {
    return a*b;
  }
  int factorial(int a)
  {
    int result = 1;
    for(int i = a ; i > 0 ; i--)
    {
      result = result * i;
    }
    return result;
  }
  int power(int num, int p)
  {
    int ans=1;
    for(int i=0, i<p, i++)
    {
      ans*=num;
    }
    return ans;
  }
struct Node
{
    int key;
    Node *left, *right;

    Node(int key)
    {
        this->key = key;
        this->left = this->right = nullptr;
    }
};

void levelOrderTraversal(Node *root)
{

    if (root == nullptr)
    {
        return;
    }

    list<Node *> queue;
    queue.push_back(root);

    Node *curr = nullptr;

    while (queue.size())
    {

        curr = queue.front();
        queue.pop_front();

        cout << curr->key << " ";

        if (curr->left)
        {
            queue.push_back(curr->left);
        }

        if (curr->right)
        {
            queue.push_back(curr->right);
        }
    }
}

  int max(int a,int b){
    if(a>b)
    {return a;}
    return b;
    }
    
    
    //InOrderTraversal
    
     void inOrderTraversal()
    {
        TreeNode *temp = root;
        while (!s1.empty() || temp != nullptr)
        {
            if(temp!=NULL)
            {
                s1.push(temp);
                temp = temp->left;
            }
            else
            {
                temp = s1.top();
                s1.pop();
                cout << temp->val<< endl;
                temp = temp->right;
            }
        }
    }
    
    void insert(Node *&root, int data)
{
    if (root == NULL)
    {
        root = create(data);
    }

    else if (root->data > data)
    {
        insert(root->left, data);
    }

    else
    {
        insert(root->right, data);
    }
}

  void postOrderDisplay(Node *root)
{
    if (root != NULL)
    {
        
        postOrderDisplay(root->left);
        postOrderDisplay(root->right);
        cout << root->data << " ";
       
    }
}

int mod(int a, int b)
{
  return a%b;
}

bool isOperand(char x)
{
  return (x >= 'a' && x <= 'z') || (x >= 'A' && x <= 'Z');
}

string infixConversion(string postfix)
{
  stack<string> infix;
  for (int i = 0; postfix[i] != '\0'; i++)
  {
    if (isOperand(postfix[i]))
    {
      string op(1, postfix[i]);
      infix.push(op);
    }
    else
    {
      string op1 = infix.top();
      infix.pop();
      string op2 = infix.top();
      infix.pop();
      infix.push("{" + op2 + postfix[i] + op1 + "}");
    }
  }
  return infix.top();
}

int sqrt(int a)
{
  a=25;
   return sqrt(a);
}
void postOrder(struct Node *root) {
    if(root != NULL) {
        postOrder(root -> left);
        postOrder(root -> right);
        cout << root -> data << " ";
    }
}
void preOrder(struct Node *root) {
    if(root != NULL) {
        cout << root -> data << " ";
        preOrder(root -> left);
        preOrder(root -> right);
    }
}
